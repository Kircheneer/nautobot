"""
This type stub file was generated by pyright.
"""

from django.utils.functional import cached_property

"""
This type stub file was generated by pyright.
"""
class TableData:
    """
    Base class for table data containers.
    """
    def __init__(self, data) -> None:
        ...
    
    def __getitem__(self, key):
        """
        Slicing returns a new `.TableData` instance, indexing returns a single record.
        """
        ...
    
    def __iter__(self):
        """
        for ... in ... default to using this. There's a bug in Django 1.3
        with indexing into QuerySets, so this side-steps that problem (as well
        as just being a better way to iterate).
        """
        ...
    
    def set_table(self, table):
        """
        `Table.__init__` calls this method to inject an instance of itself into the
        `TableData` instance.
        Good place to do additional checks if Table and TableData instance will work
        together properly.
        """
        ...
    
    @property
    def model(self):
        ...
    
    @property
    def ordering(self):
        ...
    
    @property
    def verbose_name(self):
        ...
    
    @property
    def verbose_name_plural(self):
        ...
    
    @staticmethod
    def from_data(data):
        ...
    


class TableListData(TableData):
    """
    Table data container for a list of dicts, for example::

    [
        {'name': 'John', 'age': 20},
        {'name': 'Brian', 'age': 25}
    ]

    .. note::

        Other structures might have worked in the past, but are not explicitly
        supported or tested.
    """
    @staticmethod
    def validate(data):
        """
        Validates `data` for use in this container
        """
        ...
    
    def __len__(self):
        ...
    
    @property
    def verbose_name(self):
        ...
    
    @property
    def verbose_name_plural(self):
        ...
    
    def order_by(self, aliases):
        """
        Order the data based on order by aliases (prefixed column names) in the
        table.

        Arguments:
            aliases (`~.utils.OrderByTuple`): optionally prefixed names of
                columns ('-' indicates descending order) in order of
                significance with regard to data ordering.
        """
        ...
    


class TableQuerysetData(TableData):
    """
    Table data container for a queryset.
    """
    @staticmethod
    def validate(data):
        """
        Validates `data` for use in this container
        """
        ...
    
    def __len__(self):
        """Cached data length"""
        ...
    
    def set_table(self, table):
        ...
    
    @property
    def ordering(self):
        """
        Returns the list of order by aliases that are enforcing ordering on the
        data.

        If the data is unordered, an empty sequence is returned. If the
        ordering can not be determined, `None` is returned.

        This works by inspecting the actual underlying data. As such it's only
        supported for querysets.
        """
        ...
    
    def order_by(self, aliases):
        """
        Order the data based on order by aliases (prefixed column names) in the
        table.

        Arguments:
            aliases (`~.utils.OrderByTuple`): optionally prefixed names of
                columns ('-' indicates descending order) in order of
                significance with regard to data ordering.
        """
        ...
    
    @cached_property
    def verbose_name(self):
        """
        The full (singular) name for the data.

        Model's `~django.db.Model.Meta.verbose_name` is honored.
        """
        ...
    
    @cached_property
    def verbose_name_plural(self):
        """
        The full (plural) name for the data.

        Model's `~django.db.Model.Meta.verbose_name` is honored.
        """
        ...
    


